<?php
/**
 * 
 * This file is part of the Aura Project for PHP.
 * 
 * @package Aura.View
 * 
 * @license http://opensource.org/licenses/bsd-license.php BSD
 * 
 */
namespace Aura\View\Helper\Input;

use Aura\View\Helper\AbstractHelper;

class Value extends AbstractHelper
{
    /**
     * 
     * Attributes for the input tag.
     * 
     * @var array
     * 
     */
    protected $attribs = [];
    
    /**
     * 
     * The field value for the input element. This may overwrite the 'value'
     * attribute, or may be used to see if the 'checked' attribute should be
     * set, depending on the input type.
     * 
     * @var mixed
     * 
     */
    protected $value;
    
    /**
     * 
     * Text for the label.
     * 
     * @var string
     * 
     */
    protected $label;
    
    /**
     * 
     * Attributes for the label.
     * 
     * @var array
     * 
     */
    protected $label_attribs = [];
    
    /**
     * 
     * The HTML generated by this helper.
     * 
     * @var string
     * 
     */
    protected $html = '';
    
    /**
     * 
     * Returns an `<input>` tag, optionally wrapped in a `<label>` tag.
     * 
     * @param array $attribs Attributes for the input tag.
     * 
     * @param mixed $value The field value for the input element. This may 
     * overwrite the 'value' attribute, or may be used to see if the 'checked'
     * attribute should be set, depending on the input type.
     * 
     * @return string
     * 
     */
    public function __invoke(
        $attribs,
        $value = null,
        $label = null,
        $label_attribs = []
    ) {
        // set properties
        $this->html          = '';
        $this->attribs       = $attribs;
        $this->value         = $value;
        $this->label         = $label;
        $this->label_attribs = $label_attribs;
        
        // prepare for building html
        $this->prep();
        
        // build the html
        $this->buildInput();
        $this->buildLabel();
        
        // done! return the html
        return $this->html;
    }
    
    protected function prep()
    {
        // only set value if not null
        if ($this->value !== null) {
            $this->attribs['value'] = (string) $this->value;
        }
    }
    
    protected function buildInput()
    {
        $this->html = $this->void('input', $this->attribs);
    }
    
    protected function buildLabel()
    {
        if (! $this->label) {
            return;
        }
        
        if (isset($this->attribs['id'])) {
            $this->label_attribs['for'] = $this->attribs['id'];
        }
        
        $attribs = $this->attribs($this->label_attribs);
        if ($attribs) {
            $this->html = "<label {$attribs}>{$this->html} {$this->label}</label>";
        } else {
            $this->html = "<label>{$this->html} {$this->label}</label>";
        }
    }
}
